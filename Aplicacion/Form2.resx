<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAALEAAACxAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX6nzPmSt955os/fcXab170qT
        8vdHkPH+cLv5/mWu9/ZPmPPuR43x2UWN8JtEkvE4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8CYqz2h2229+12wfr/cr36/0yU
        8v9GjfH/Ro3x/0eP8f92wfr/dsH6/3bA+v9iqvb/R47x/0aN8f9HjfHqRY3xfQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYaz4R225+e92wfr/dsH6/3K9
        +v9JkPH/Ro3x/0aN8f9GjfH/R4/x/3bB+v92wfr/dsH6/3bB+v9osvf/R47x/0aN8f9GjfH/Rozx7kaM
        8EUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGOs9ZZ1wPn/dsH6/3bB
        +v92wfr/TJTy/0aN8f9GjfH/Ro3x/0aN8f9Hj/H/dsH6/3bB+v92wfr/dsH6/3bB+v9hqvb/Ro3x/0aN
        8f9GjfH/Ro3w/0aM8ocAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlrfandsD6/3bB
        +v92wfr/dsH6/2Gq9f9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0eP8f92wfr/dsH6/3bB+v92wfr/dsH6/3bA
        +v9QmfP/Ro3x/0aN8f9GjfH/Ro3x/0WO8ZcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYKz4aHbB
        +v92wfr/dsH6/3bB+v92wfr/SJDx/0aN8f9GjfH/Ro3x/0aN8f9GjfH/R4/x/3bB+v92wfr/dsH6/3bB
        +v92wfr/dsH6/2ix9/9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0iM8l8AAAAAAAAAAAAAAAAAAAAAAAAAAFWq
        /xJxu/n7dsH6/3bB+v92wfr/dsH6/2Kr9/9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0aN8f9Hj/H/dsH6/3bB
        +v92wfr/dsH6/3bB+v92wfr/dsH6/0+X8/9GjfH/Ro3x/0aN8f9GjfH/Ro3x+ECA/wgAAAAAAAAAAAAA
        AAAAAAAAY631m3bB+v92wfr/dsH6/3bB+v92wfr/TpXz/0aN8f9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0eP
        8f92wfr/dsH6/3bB+v92wfr/dsH6/3bB+v92wfr/X6j1/0aN8f9GjfH/Ro3x/0aN8f9GjfH/RY/0iAAA
        AAAAAAAAAAAAAAAAAABst/jwdsH6/3bB+v92wfr/dsH6/3a/+v9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0aN
        8f9GjfH/R4/x/3bB+v92wfr/dsH6/3bB+v92wfr/dsH6/3bB+v9uufn/Ro3x/0aN8f9GjfH/Ro3x/0aN
        8f9FjfHpAAAAAAAAAAAAAAAAAAAAAHO/+v52wfr/dsH6/3bB+v92wfr/aLL4/0aN8f9GjfH/Ro3x/0aN
        8f9GjfH/Ro3x/0aN8f9Hj/H/dsH6/3bB+v92wfr/dsH6/3bB+v92wfr/dsH6/3bB+v9LkvH/Ro3x/0aN
        8f9GjfH/Ro3x/0aO8fwAAAAAAAAAAAAAAABeqP8mdsH6/3bB+v92wfr/dsH6/3bB+v9ZovX/Ro3x/0aN
        8f9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0eP8f92wfr/dsH6/3bB+v92wfr/dsH6/3bB+v92wfr/dsH6/1We
        8/9GjfH/Ro3x/0aN8f9GjfH/Ro3x/zmO/xIAAAAAAAAAAGSx9Bd2wfr/dsH6/3bB+v92wfr/dsH6/1GZ
        9P9GjfH/Ro3x/0aN8f9GjfH/Ro3x/0aN8f9GjfH/R5Dy/nS++f92wfr/dsH6/3bB+v92wfr/dsH6/3bB
        +v92wfr/Xab2/0aN8f9GjfH/Ro3x/0aN8f9GjfH/QID/CAAAAAAAAAAAAAAAAHO9+f12wfr/dsH6/3bB
        +v92wfr/T5fz+0yS8fRcoPPkdLX02pPQ992d3PfmqOL48K/p+fyw6vn/sOr5/6/p+fur6PrvpeP45p3c
        +d2KzPnaecH45XK7+PVjrfb7Ro3x/0aN8f9GjfH/Ro3x/0aN8fsAAAAAAAAAAAAAAAAAAAAAarT44HbB
        +v94wfr+icz55afi+duw6vn8sOr5/7Dq+f+w6vn/sOr5/7Dq+f+w6vn/sOr5/7Dq+f+w6vn/sOr5/7Dq
        +f+w6vn/sOr5/7Dq+f+w6vn/sOr5/7Dq+fyh3vnadbb150uR8v9GjfH/R43y1QAAAAAAAAAAAAAAAAAA
        AABnrvhyi8/346/q+e+w6vn/sOr5/7Dq+f+n5vTujtfy2nbJ7txsturjbIrh7mV/3PNfc9n4WGfW+1hn
        1vtgdNr3ZoLd8m6L4e12quPiisro3KDd89qr5/fxsOr5/7Dq+f+w6vn/ruj67Hm59eRLkvJiAAAAAAAA
        AAAAAAAAAAAAALDp+YGw6vn/sOr5/6nk9uZrr9PcTpW/80eTuP9cwOT/XMDk/1i05f9MS8z/TEvM/0xL
        zP9MS8z/TEvM/0xLzP9MS8z/TEvM/0lnzf9GkLH/RpCx/1q75f9fvOfyecvu26ro+umw6vn/sOr5/7Dp
        +HQAAAAAAAAAAAAAAAAAAAAAsev4TqTb6Od3mafdU53TNEaQsf9GkLH/RpCx/1u85f9cwOT/W7/l/0xO
        zv9MS8z/TUzN/1JU0P9SeaH/UoCV/0tQyP9MS8z/Sl/N/0aQsf9Hkrb/XMDk/1zA5P9cwOT/Xq3sRHqc
        q+am3OrlsOn4RAAAAAAAAAAAAAAAAAAAAAAAAAAANEBJcFJgb/oAAAAAR5C1/UaQsf9GkLH/WLbk/1zA
        5P9cwOT/TmvW/1RU1P9xdfX/b4m9/1+tJ/9frSf/UoOP/0xLzP9Kb8v/RpCx/0qXw/9cwOT/XMDk/1u+
        5f4A//8CVmV1/TU9RVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuOjoWXGx9/zE3QypGkL/sRpCx/0aQ
        sf9Ur+H/XMDk/1zA5P9Rid//aGvr/3Z7+/9wibz/Yaoz/2GrM/9UgZf/TEvM/0aKwf9GkLH/TZ/P/1zA
        5P9cwOT/WLfn8DE9RT9aanv/MzMzCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOXGv2N0FLgUeO
        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
        45/4//8f+P//H/x//j/+P/x//gAA//+AAf8=
</value>
  </data>
</root>